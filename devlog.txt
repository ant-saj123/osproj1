Day 1: Initial Setup (Logger Basics) - 03/18
Progress:
- Created the initial structure for the logger module.
- Implemented basic logging functionality that appends messages to a file.

Challenges:
- Decided on using `sys.stdin` to read messages and `time.strftime` for timestamps.

Next Steps:
- Improve the log format by including action tags (e.g., "INFO", "ERROR").
- Start working on the encryptor module.


Day 2: Logger Improvements & Encryptor Setup - 03/19

Progress:
- Enhanced the logger by adding action tags (e.g., "INFO", "ERROR") for log messages.
- Created the basic structure for the encryptor module.

Challenges:
- Figured out how to handle different log message types with the logger.

Next Steps:
- Implement  cipher encryption logic.
- Start working on encryption and decryption functionality in the encryptor.

Day 3: Implemented Vigenère Cipher in Encryptor Module - 03/21

Progress:

Replaced the Caesar cipher logic with a Vigenère cipher implementation.
Ensured both encryption and decryption functions use the passkey character-by-character for accurate transformation.
Kept the interface (commands like PASSKEY, ENCRYPT, DECRYPT) consistent for smooth integration with the driver.
Challenges:

Needed to account for key wrapping and preserve case sensitivity.
Made sure non-alphabetic characters remained unchanged during encryption/decryption.
Next Steps:

Finalize integration between the encryptor and driver module.
Begin implementing command history tracking and user interface improvements in the driver.


Day 4: Driver Setup & Integration (Logger + Encryptor) - 03/22

Progress:
- Created the `driver.py` file to integrate the logger and encryptor modules.
- Added commands for password setting, encryption, decryption, and history tracking.

Challenges:
- Managed communication between multiple processes (logger and encryptor) using `subprocess`.
- Handled edge cases for user input and ensured correct execution flow.

Next Steps:
- Test the entire system (logger + encryptor) with different commands.
